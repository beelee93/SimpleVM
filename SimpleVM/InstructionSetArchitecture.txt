=======================================
SimpleVM Instruction Set Architecture
=======================================

SimpleVM uses instructions of variable length, which depends 
on the opcode being processed.

Each opcode is 8 bits long. However, its operands can be 
of any size (1,2,4 bytes)

There are 4 types of opcodes
1. Data Movement
2. Arithmetic
3. Jumps/Conditionals
4. Others

=======================================
1. Data Movement Opcodes
=======================================

LOAD Imm32
	Loads the immediate value (32-bits) into
	Register 0
	This is the only means of putting immediate
	values into the register

MOV Ry, Rx
	Moves 32-bit data from register Rx to Ry

MOV [Ry], Rx
	Moves 32-bit data from register Rx to memory
	pointed by Ry's value

MOV Ry, [Rx]
	Moves 32-bit data from memory pointed by Rx's
	value to register Ry

-- following works the same, but for 8-bit data
MOVB [Ry], Rx
MOVB Ry, [Rx] -- Ry is then sign extended

-- following works the same, but for 16-bit data
MOVW [Ry], Rx
MOVW Ry, [Rx] -- Ry is then sign extended

=======================================
2. Arithmetic
=======================================

ADD Ry, Rx
	Ry <- Ry + Rx

SUB Ry, Rx
	Ry <- Ry - Rx

MUL Ry, Rx
	Ry <- Low DWORD (Ry*Rx)
	R7 <- Hi DWORD (Ry*Rx)

DIV Ry, Rx
	Ry <- Ry / Rx

MOD Ry, Rx
	Ry <- Ry % Rx

AND Ry, Rx
	Ry <- Ry & Rx

OR Ry, Rx
	Ry <- Ry | Rx

NOT Ry
	Ry <- ~Ry

XOR Ry, Rx
	Ry <- Ry ^ Rx

=======================================
3. Jumps/Conditionals
=======================================

CMP Ry, Rx
	Compares Ry to Rx (Takes Ry-Rx)

JMP Imm32
	Jumps to the offset

JEQ Imm32
	Jumps to the offset if the last comparison is "equal"

JNEQ Imm32
	Jumps to the offset if the last comparison is "not-equal"

=======================================
4. Others
=======================================

SYS Imm
	Performs a system-defined function
	Function is indexed with the immediate value

PUSH Rx
	Pushes the 32-bit value of a register to stack

-- following are similar but for different sized
-- values

PUSHB Rx
PUSHW Rx

POP Rx
	Pops 32 bits of value into register Rx

-- following are similar but for different sized
-- values
POPB Rx
POPW Rx

CALL Imm
	Calls the subroutine at specified offset
	Pushes current PC to stack

RET
	Pops value off from stack as current PC

HALT
	Signal for termination

SYS Imm8
	Raises the corresponding interrupt

NOP
	No operation

=======================================
Interrupts
=======================================

Interrupts can be raised at any point, and the corresponding
interrupt service routine will be executed on the next
tick cycle.

0x10 - INT_HALT
Signals the termination of the program

0x21 - INT_OUTCHAR
Puts a character in R0 to stdout

=======================================
Test Codes
=======================================

1. Test conditional

0x01, 0x01, 0, 0, 0, // 0: LOAD 1 (to R0)
0x02, 0x10, // 5: MOV R1, R0
0x01, 0x02, 0, 0, 0, // 7: LOAD 2 (to R0)
0x11, 0x10, // 12: CMP R1,R0
0x53, 24,0,0,0, // 14: Jumps to the offset if R1!=R0
0x01, 0xFF, 0, 0, 0, // 19: LOAD 255 (to R0)
0x02, 0x20, // 24: MOV R2,R0
0x90 // HALT

2. Print Hello World

0x01, 1,0,0,0,		// 0: LOAD 1 (to R0)
0x02, 0x10,			// 5: MOV R1,R0 (R1 = R0)
0x01, 37,0,0,0,		// 7: Load 37 (to R0)
0x02, 0x20,			// 12: MOV R2,R0 (R2 = R0)
0x0D, 0x33,			// 14: XOR R3,R3 (zero out R3)
0x43, 0x42,			// (loop) 16: MOVB R4, [R2]
0x11, 0x43,			// 18: CMP R4, R3
0x13, 36,0,0,0,		// 20: JEQ 36 (jump if R4==R3 to finish)
0x02, 0x04,			// 25: MOV R0,R4 (R0 = R4)
0x50, 0x21,			// 27: SYS INT_OUTCHAR (putchar)
0x05, 0x21,			// 29: ADD R2,R2 (R2=R2+R1)
0x12, 16,0,0,0,		// 31: JMP 16 (jump to loop)
0x90, 				// (finish) 36: HALT
'H','e','l','l','o',' ', // 37
'w','o','r','l','d','\n',
0

// By setting the VM to run at 50ms per tick, you can see
// the text slowly appearing one character at a time

